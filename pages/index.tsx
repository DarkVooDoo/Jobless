import type { GetServerSideProps, NextPage } from 'next'
import Head from 'next/head'

import { useEffect } from 'react'

import styles from '../styles/Home.module.css'

import { JobCardTypes } from 'models/Job/Job.types'
import { SearchTypes } from 'utils/types'
import { createCookie } from 'utils/Helpers'

import SearchBar from 'components/SearchBar'
import JobCard from 'components/JobCard'
import { useQuerie } from 'utils/hooks'
import Loading from 'components/Loading'

interface HomeProps{
  preferences: {
    postal: string,
    contrat: string,
    search: string
  } | undefined
}
let page = 0
const QuerySearch = (search:object)=>{
  return Object.entries(search).map(item=>`${item[0].trim()}=${item[1]}`).join("&")
}
const Home: NextPage<HomeProps> = ({preferences}) => {
  const {data, loading, refetch, error} = useQuerie<JobCardTypes[]>(`${preferences ? `/api/job/search?${QuerySearch(preferences)}` : "/api/job"}`)
  
  const onSearch = async (search: SearchTypes)=>{
    createCookie("SearchPref", JSON.stringify({postal: search.postal, contrat: search.contrat, search: search.search}), 60*60*24*15)
    const objectToGetQuery = Object.entries(search).map(item=>`${item[0].trim()}=${item[1]}`).join("&")
    refetch(`/api/job/search?${objectToGetQuery}`)
  }

  const onEndReached = async (entries:IntersectionObserverEntry[])=>{
    if(entries[0].isIntersecting && entries[0].intersectionRatio > 0.7){
      page++
      refetch(`${preferences ? `/api/job/search?${QuerySearch(preferences)}&page=${page}` : `/api/job?page=${page}`}`)
    }
    
  }

  useEffect(()=>{
    const footer = document.querySelector("footer")
    const observer = new IntersectionObserver(onEndReached, {rootMargin: "0px", threshold: 0.9})
    footer && observer.observe(footer)
    return ()=>{
      footer && observer.unobserve(footer)
    }
  },[])

  if(!loading && data){
    const jobCards = data.map(item=><JobCard key={item.job_id} {...{...item}} />)
    return (
      <div className={styles.container}>
        <Head>
          <title>Create Next App</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <SearchBar {...{onSearch}} />
        {jobCards}
  
      </div>
    )
  }else if(error) return <p>Error...</p>
  return (
    <Loading />
  )
}

export const getServerSideProps:GetServerSideProps = async ({req})=>{
  const pref = req.cookies["SearchPref"]
  if(!pref) return {props: {}}
  return {props: {preferences: JSON.parse(pref)}}
}

export default Home
